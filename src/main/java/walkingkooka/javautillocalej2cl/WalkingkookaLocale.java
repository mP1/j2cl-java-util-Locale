/*
 * Copyright 2019 Miroslav Pokorny (github.com/mP1)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package walkingkooka.javautillocalej2cl;

import walkingkooka.ToStringBuilder;
import walkingkooka.collect.list.Lists;

import java.util.Optional;

public final class WalkingkookaLocale {

    /**
     * Complex locales that are ignored.
     */
    public static boolean isUnsupported(final String languageTag) {
        boolean ignored;

        switch (languageTag) {
            case "ja-JP-u-ca-japanese-x-lvariant-JP":
            case "th-TH-u-nu-thai-x-lvariant-TH":
                ignored = true;
                break;
            default:
                ignored = false;
                break;
        }

        return ignored;
    }

    /**
     * Makes the language lower case and substitutes new language codes with old to match JRE behaviour.
     */
    public static String languageFix(final String language) {
        final String lower = language.toLowerCase();

        final String fixed;

        switch (lower) {
            case "he":
                fixed = "iw";
                break;
            case "yi":
                fixed = "ji";
                break;
            case "id":
                fixed = "in";
                break;
            case "und":
                fixed = "";
                break;
            default:
                fixed = lower.toLowerCase();
                break;
        }
        return fixed;
    }

    /**
     * The inverse of {@link #languageFix(String).}
     */
    public static String languageTagFix(final String language) {
        final String lower = language.toLowerCase();

        final String fixed;

        switch (lower) {
            case "iw":
                fixed = "he";
                break;
            case "ji":
                fixed = "yi";
                break;
            case "in":
                fixed = "id";
                break;
            case "":
                fixed = "und";
                break;
            default:
                fixed = lower.toLowerCase();
                break;
        }

        return fixed;
    }

    /**
     * Finds the matching {@link WalkingkookaLocale} for the given {@link WalkingkookaLanguageTag}.
     */
    public static Optional<WalkingkookaLocale> forLanguageTag(final WalkingkookaLanguageTag tag) {
        return all()
            .stream()
            .filter(l -> l.test(tag))
            .findFirst();
    }

    /**
     * Returns all {@link WalkingkookaLocale locales} known to the system.
     */
    public static java.util.List<WalkingkookaLocale> all() {
        return ALL;
    }

    private static java.util.List<WalkingkookaLocale> ALL = Lists.of(
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "af",
                            "af",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "af-NA",
                            "af",
                            "NA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af_NA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "af-ZA",
                            "af",
                            "ZA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af_ZA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "agq",
                            "agq",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "agq-CM",
                            "agq",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ak",
                            "ak",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ak-GH",
                            "ak",
                            "GH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak_GH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "am",
                            "am",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "am-ET",
                            "am",
                            "ET",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_am_ET()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar",
                            "ar",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-001",
                            "ar",
                            "001",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-AE",
                            "ar",
                            "AE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_AE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-BH",
                            "ar",
                            "BH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_BH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-DJ",
                            "ar",
                            "DJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_DJ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-DZ",
                            "ar",
                            "DZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_DZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-EG",
                            "ar",
                            "EG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_EG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-EH",
                            "ar",
                            "EH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_EH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-ER",
                            "ar",
                            "ER",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_ER()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-IL",
                            "ar",
                            "IL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_IL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-IQ",
                            "ar",
                            "IQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_IQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-JO",
                            "ar",
                            "JO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_JO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-KM",
                            "ar",
                            "KM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_KM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-KW",
                            "ar",
                            "KW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_KW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-LB",
                            "ar",
                            "LB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_LB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-LY",
                            "ar",
                            "LY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_LY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-MA",
                            "ar",
                            "MA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_MA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-MR",
                            "ar",
                            "MR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_MR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-OM",
                            "ar",
                            "OM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_OM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-PS",
                            "ar",
                            "PS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_IL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-QA",
                            "ar",
                            "QA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_QA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-SA",
                            "ar",
                            "SA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_SA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-SD",
                            "ar",
                            "SD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_SD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-SO",
                            "ar",
                            "SO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_SO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-SS",
                            "ar",
                            "SS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_SS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-SY",
                            "ar",
                            "SY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_SY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-TD",
                            "ar",
                            "TD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_TD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-TN",
                            "ar",
                            "TN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_TN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ar-YE",
                            "ar",
                            "YE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ar_YE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "as",
                            "as",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_as()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "as-IN",
                            "as",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_as_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "asa",
                            "asa",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "asa-TZ",
                            "asa",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ast",
                            "ast",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ast()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ast-ES",
                            "ast",
                            "ES",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ast_ES()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "az",
                            "az",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "az-AZ",
                            "az",
                            "AZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az_AZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "az-Cyrl",
                            "az",
                            "",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "az-Cyrl-AZ",
                            "az",
                            "AZ",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_az_AZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "az-Latn",
                            "az",
                            "",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "az-Latn-AZ",
                            "az",
                            "AZ",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_az_AZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bas",
                            "bas",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bas-CM",
                            "bas",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "be",
                            "be",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "be-BY",
                            "be",
                            "BY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_be_BY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bem",
                            "bem",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bem-ZM",
                            "bem",
                            "ZM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bem_ZM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bez",
                            "bez",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bez-TZ",
                            "bez",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bg",
                            "bg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bg-BG",
                            "bg",
                            "BG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bg_BG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bm",
                            "bm",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bm-ML",
                            "bm",
                            "ML",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bm_ML()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bn",
                            "bn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bn-BD",
                            "bn",
                            "BD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bn_BD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bn-IN",
                            "bn",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bn_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bo",
                            "bo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bo-CN",
                            "bo",
                            "CN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_CN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bo-IN",
                            "bo",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "br",
                            "br",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "br-FR",
                            "br",
                            "FR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "brx",
                            "brx",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "brx-IN",
                            "brx",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bs",
                            "bs",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bs-BA",
                            "bs",
                            "BA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bs_BA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bs-Cyrl",
                            "bs",
                            "",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bs-Cyrl-BA",
                            "bs",
                            "BA",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_bs_BA_Cyrl()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bs-Latn",
                            "bs",
                            "",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "bs-Latn-BA",
                            "bs",
                            "BA",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_bs_BA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ca",
                            "ca",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ca-AD",
                            "ca",
                            "AD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ca-ES",
                            "ca",
                            "ES",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ca-ES-VALENCIA",
                            "ca",
                            "ES",
                            "VALENCIA",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ca-FR",
                            "ca",
                            "FR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ca-IT",
                            "ca",
                            "IT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ce",
                            "ce",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ce()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ce-RU",
                            "ce",
                            "RU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ce_RU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cgg",
                            "cgg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cgg-UG",
                            "cgg",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "chr",
                            "chr",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "chr-US",
                            "chr",
                            "US",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ckb",
                            "ckb",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ckb()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ckb-IQ",
                            "ckb",
                            "IQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ckb_IQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ckb-IR",
                            "ckb",
                            "IR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ckb_IR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cs",
                            "cs",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cs-CZ",
                            "cs",
                            "CZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cs_CZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cu",
                            "cu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cu-RU",
                            "cu",
                            "RU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cu_RU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cy",
                            "cy",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "cy-GB",
                            "cy",
                            "GB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "da",
                            "da",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "da-DK",
                            "da",
                            "DK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_da_DK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "da-GL",
                            "da",
                            "GL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_da_DK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dav",
                            "dav",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dav-KE",
                            "dav",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de",
                            "de",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de-AT",
                            "de",
                            "AT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de-BE",
                            "de",
                            "BE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de-CH",
                            "de",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_de_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de-DE",
                            "de",
                            "DE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de-LI",
                            "de",
                            "LI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_de_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "de-LU",
                            "de",
                            "LU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dje",
                            "dje",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dje-NE",
                            "dje",
                            "NE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje_NE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dsb",
                            "dsb",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dsb-DE",
                            "dsb",
                            "DE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dua",
                            "dua",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dua-CM",
                            "dua",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dyo",
                            "dyo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dyo-SN",
                            "dyo",
                            "SN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dz",
                            "dz",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dz()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "dz-BT",
                            "dz",
                            "BT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dz_BT()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ebu",
                            "ebu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ebu-KE",
                            "ebu",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ee",
                            "ee",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ee()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ee-GH",
                            "ee",
                            "GH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ee_GH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ee-TG",
                            "ee",
                            "TG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ee_TG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "el",
                            "el",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_el()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "el-CY",
                            "el",
                            "CY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_el_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "el-GR",
                            "el",
                            "GR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_el_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en",
                            "en",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-001",
                            "en",
                            "001",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-150",
                            "en",
                            "150",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-AG",
                            "en",
                            "AG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-AI",
                            "en",
                            "AI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-AS",
                            "en",
                            "AS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-AT",
                            "en",
                            "AT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-AU",
                            "en",
                            "AU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BB",
                            "en",
                            "BB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_BB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BE",
                            "en",
                            "BE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BI",
                            "en",
                            "BI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_BI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BM",
                            "en",
                            "BM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_BM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BS",
                            "en",
                            "BS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_BS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BW",
                            "en",
                            "BW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_BW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-BZ",
                            "en",
                            "BZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_BZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CA",
                            "en",
                            "CA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CC",
                            "en",
                            "CC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CH",
                            "en",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CK",
                            "en",
                            "CK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CM",
                            "en",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CX",
                            "en",
                            "CX",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-CY",
                            "en",
                            "CY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-DE",
                            "en",
                            "DE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-DG",
                            "en",
                            "DG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-DK",
                            "en",
                            "DK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_da_DK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-DM",
                            "en",
                            "DM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-ER",
                            "en",
                            "ER",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_ER()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-FI",
                            "en",
                            "FI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-FJ",
                            "en",
                            "FJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FJ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-FK",
                            "en",
                            "FK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-FM",
                            "en",
                            "FM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GB",
                            "en",
                            "GB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GD",
                            "en",
                            "GD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GG",
                            "en",
                            "GG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GH",
                            "en",
                            "GH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak_GH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GI",
                            "en",
                            "GI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_GI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GM",
                            "en",
                            "GM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_GM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GU",
                            "en",
                            "GU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-GY",
                            "en",
                            "GY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_GY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-HK",
                            "en",
                            "HK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_HK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-IE",
                            "en",
                            "IE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-IL",
                            "en",
                            "IL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_IL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-IM",
                            "en",
                            "IM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-IN",
                            "en",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-IO",
                            "en",
                            "IO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-JE",
                            "en",
                            "JE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-JM",
                            "en",
                            "JM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_JM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-KE",
                            "en",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-KI",
                            "en",
                            "KI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-KN",
                            "en",
                            "KN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-KY",
                            "en",
                            "KY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_KY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-LC",
                            "en",
                            "LC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-LR",
                            "en",
                            "LR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_LR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-LS",
                            "en",
                            "LS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_LS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MG",
                            "en",
                            "MG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MH",
                            "en",
                            "MH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MO",
                            "en",
                            "MO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MP",
                            "en",
                            "MP",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MS",
                            "en",
                            "MS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MT",
                            "en",
                            "MT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MU",
                            "en",
                            "MU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MW",
                            "en",
                            "MW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-MY",
                            "en",
                            "MY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NA",
                            "en",
                            "NA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_NA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NF",
                            "en",
                            "NF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NG",
                            "en",
                            "NG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_NG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NL",
                            "en",
                            "NL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NR",
                            "en",
                            "NR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NU",
                            "en",
                            "NU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-NZ",
                            "en",
                            "NZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-PG",
                            "en",
                            "PG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_PG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-PH",
                            "en",
                            "PH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_PH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-PK",
                            "en",
                            "PK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_PK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-PN",
                            "en",
                            "PN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-PR",
                            "en",
                            "PR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-PW",
                            "en",
                            "PW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-RW",
                            "en",
                            "RW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_RW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SB",
                            "en",
                            "SB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SC",
                            "en",
                            "SC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SD",
                            "en",
                            "SD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SE",
                            "en",
                            "SE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SG",
                            "en",
                            "SG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SH",
                            "en",
                            "SH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SI",
                            "en",
                            "SI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_el_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SL",
                            "en",
                            "SL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SS",
                            "en",
                            "SS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SX",
                            "en",
                            "SX",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SX()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-SZ",
                            "en",
                            "SZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-TC",
                            "en",
                            "TC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-TK",
                            "en",
                            "TK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-TO",
                            "en",
                            "TO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_TO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-TT",
                            "en",
                            "TT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_TT()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-TV",
                            "en",
                            "TV",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-TZ",
                            "en",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-UG",
                            "en",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-UM",
                            "en",
                            "UM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-US",
                            "en",
                            "US",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-US-POSIX",
                            "en",
                            "US",
                            "POSIX",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_US_POSIX()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-VC",
                            "en",
                            "VC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_AG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-VG",
                            "en",
                            "VG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_FM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-VI",
                            "en",
                            "VI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-VU",
                            "en",
                            "VU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_VU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-WS",
                            "en",
                            "WS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_WS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-ZA",
                            "en",
                            "ZA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af_ZA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-ZM",
                            "en",
                            "ZM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bem_ZM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "en-ZW",
                            "en",
                            "ZW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_ZW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "eo",
                            "eo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "eo-001",
                            "eo",
                            "001",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es",
                            "es",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-419",
                            "es",
                            "419",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-AR",
                            "es",
                            "AR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_AR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-BO",
                            "es",
                            "BO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_BO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-BR",
                            "es",
                            "BR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_BR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-CL",
                            "es",
                            "CL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_CL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-CO",
                            "es",
                            "CO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_CO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-CR",
                            "es",
                            "CR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_CR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-CU",
                            "es",
                            "CU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_CU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-DO",
                            "es",
                            "DO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_DO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-EA",
                            "es",
                            "EA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-EC",
                            "es",
                            "EC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_EC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-ES",
                            "es",
                            "ES",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-GQ",
                            "es",
                            "GQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-GT",
                            "es",
                            "GT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GT()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-HN",
                            "es",
                            "HN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_HN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-IC",
                            "es",
                            "IC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-MX",
                            "es",
                            "MX",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_MX()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-NI",
                            "es",
                            "NI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_NI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-PA",
                            "es",
                            "PA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_PA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-PE",
                            "es",
                            "PE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_PE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-PH",
                            "es",
                            "PH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_PH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-PR",
                            "es",
                            "PR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-PY",
                            "es",
                            "PY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_PY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-SV",
                            "es",
                            "SV",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_SV()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-US",
                            "es",
                            "US",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-UY",
                            "es",
                            "UY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_UY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "es-VE",
                            "es",
                            "VE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_VE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "et",
                            "et",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_et()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "et-EE",
                            "et",
                            "EE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_et_EE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "eu",
                            "eu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "eu-ES",
                            "eu",
                            "ES",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ewo",
                            "ewo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ewo-CM",
                            "ewo",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fa",
                            "fa",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fa()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fa-AF",
                            "fa",
                            "AF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fa_AF()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fa-IR",
                            "fa",
                            "IR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fa_IR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ff",
                            "ff",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ff-CM",
                            "ff",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ff-GN",
                            "ff",
                            "GN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ff_GN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ff-MR",
                            "ff",
                            "MR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ff_MR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ff-SN",
                            "ff",
                            "SN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fi",
                            "fi",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fi()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fi-FI",
                            "fi",
                            "FI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fi_FI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fil",
                            "fil",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fil-PH",
                            "fil",
                            "PH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_PH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fo",
                            "fo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fo()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fo-DK",
                            "fo",
                            "DK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fo_DK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fo-FO",
                            "fo",
                            "FO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fo_FO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr",
                            "fr",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-BE",
                            "fr",
                            "BE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-BF",
                            "fr",
                            "BF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-BI",
                            "fr",
                            "BI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_BI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-BJ",
                            "fr",
                            "BJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-BL",
                            "fr",
                            "BL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CA",
                            "fr",
                            "CA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_CA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CD",
                            "fr",
                            "CD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_CD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CF",
                            "fr",
                            "CF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CG",
                            "fr",
                            "CG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CH",
                            "fr",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CI",
                            "fr",
                            "CI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-CM",
                            "fr",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-DJ",
                            "fr",
                            "DJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_DJ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-DZ",
                            "fr",
                            "DZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_DZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-FR",
                            "fr",
                            "FR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-GA",
                            "fr",
                            "GA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-GF",
                            "fr",
                            "GF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-GN",
                            "fr",
                            "GN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ff_GN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-GP",
                            "fr",
                            "GP",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-GQ",
                            "fr",
                            "GQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-HT",
                            "fr",
                            "HT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_HT()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-KM",
                            "fr",
                            "KM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_KM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-LU",
                            "fr",
                            "LU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MA",
                            "fr",
                            "MA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_MA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MC",
                            "fr",
                            "MC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MF",
                            "fr",
                            "MF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MG",
                            "fr",
                            "MG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_MG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-ML",
                            "fr",
                            "ML",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MQ",
                            "fr",
                            "MQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MR",
                            "fr",
                            "MR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ff_MR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-MU",
                            "fr",
                            "MU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_MU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-NC",
                            "fr",
                            "NC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_NC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-NE",
                            "fr",
                            "NE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-PF",
                            "fr",
                            "PF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_NC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-PM",
                            "fr",
                            "PM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-RE",
                            "fr",
                            "RE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-RW",
                            "fr",
                            "RW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_RW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-SC",
                            "fr",
                            "SC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_SC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-SN",
                            "fr",
                            "SN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-SY",
                            "fr",
                            "SY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_SY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-TD",
                            "fr",
                            "TD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-TG",
                            "fr",
                            "TG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dyo_SN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-TN",
                            "fr",
                            "TN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_TN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-VU",
                            "fr",
                            "VU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_VU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-WF",
                            "fr",
                            "WF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_NC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fr-YT",
                            "fr",
                            "YT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fur",
                            "fur",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fur-IT",
                            "fur",
                            "IT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fy",
                            "fy",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "fy-NL",
                            "fy",
                            "NL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ga",
                            "ga",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ga-IE",
                            "ga",
                            "IE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gd",
                            "gd",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gd-GB",
                            "gd",
                            "GB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gl",
                            "gl",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gl-ES",
                            "gl",
                            "ES",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gsw",
                            "gsw",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_gsw()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gsw-CH",
                            "gsw",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_gsw_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gsw-FR",
                            "gsw",
                            "FR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_gsw_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gsw-LI",
                            "gsw",
                            "LI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_gsw_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gu",
                            "gu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gu-IN",
                            "gu",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "guz",
                            "guz",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "guz-KE",
                            "guz",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gv",
                            "gv",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "gv-IM",
                            "gv",
                            "IM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ha",
                            "ha",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ha-GH",
                            "ha",
                            "GH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak_GH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ha-NE",
                            "ha",
                            "NE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bm_ML()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ha-NG",
                            "ha",
                            "NG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_NG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "haw",
                            "haw",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "haw-US",
                            "haw",
                            "US",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "he",
                            "iw",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_iw()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "he-IL",
                            "iw",
                            "IL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_iw_IL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hi",
                            "hi",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hi-IN",
                            "hi",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hr",
                            "hr",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hr-BA",
                            "hr",
                            "BA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bs_BA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hr-HR",
                            "hr",
                            "HR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_hr_HR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hsb",
                            "hsb",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hsb-DE",
                            "hsb",
                            "DE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hu",
                            "hu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hu-HU",
                            "hu",
                            "HU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_hu_HU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hy",
                            "hy",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "hy-AM",
                            "hy",
                            "AM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_hy_AM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "id",
                            "in",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "id-ID",
                            "in",
                            "ID",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_in_ID()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ig",
                            "ig",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ig-NG",
                            "ig",
                            "NG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_NG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ii",
                            "ii",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ii-CN",
                            "ii",
                            "CN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_CN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "is",
                            "is",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "is-IS",
                            "is",
                            "IS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_is_IS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "it",
                            "it",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "it-CH",
                            "it",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_it_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "it-IT",
                            "it",
                            "IT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "it-SM",
                            "it",
                            "SM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ja",
                            "ja",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ja-JP",
                            "ja",
                            "JP",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ja_JP()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "jgo",
                            "jgo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "jgo-CM",
                            "jgo",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "jmc",
                            "jmc",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "jmc-TZ",
                            "jmc",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ka",
                            "ka",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ka()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ka-GE",
                            "ka",
                            "GE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ka_GE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kab",
                            "kab",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kab-DZ",
                            "kab",
                            "DZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_fr_DZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kam",
                            "kam",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kam-KE",
                            "kam",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kde",
                            "kde",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kde-TZ",
                            "kde",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kea",
                            "kea",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_kea()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kea-CV",
                            "kea",
                            "CV",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_kea_CV()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "khq",
                            "khq",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "khq-ML",
                            "khq",
                            "ML",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje_NE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ki",
                            "ki",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ki-KE",
                            "ki",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kk",
                            "kk",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kk-KZ",
                            "kk",
                            "KZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_kk_KZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kkj",
                            "kkj",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kkj-CM",
                            "kkj",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kl",
                            "kl",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kl-GL",
                            "kl",
                            "GL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_da_DK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kln",
                            "kln",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kln-KE",
                            "kln",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "km",
                            "km",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "km-KH",
                            "km",
                            "KH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_km_KH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kn",
                            "kn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kn-IN",
                            "kn",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ko",
                            "ko",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ko-KP",
                            "ko",
                            "KP",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ko_KP()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ko-KR",
                            "ko",
                            "KR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ko_KR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kok",
                            "kok",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kok-IN",
                            "kok",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ks",
                            "ks",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ks()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ks-IN",
                            "ks",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ks_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ksb",
                            "ksb",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ksb-TZ",
                            "ksb",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ksf",
                            "ksf",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ksf-CM",
                            "ksf",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ksh",
                            "ksh",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ksh-DE",
                            "ksh",
                            "DE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh_DE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kw",
                            "kw",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "kw-GB",
                            "kw",
                            "GB",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cy_GB()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ky",
                            "ky",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ky()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ky-KG",
                            "ky",
                            "KG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ky_KG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lag",
                            "lag",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lag-TZ",
                            "lag",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lb",
                            "lb",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lb-LU",
                            "lb",
                            "LU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lg",
                            "lg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lg-UG",
                            "lg",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lkt",
                            "lkt",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lkt-US",
                            "lkt",
                            "US",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ln",
                            "ln",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ln-AO",
                            "ln",
                            "AO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ln_AO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ln-CD",
                            "ln",
                            "CD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ln_CD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ln-CF",
                            "ln",
                            "CF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ln-CG",
                            "ln",
                            "CG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lo",
                            "lo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lo()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lo-LA",
                            "lo",
                            "LA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lo_LA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lrc",
                            "lrc",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ks()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lrc-IQ",
                            "lrc",
                            "IQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lrc_IQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lrc-IR",
                            "lrc",
                            "IR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lrc_IR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lt",
                            "lt",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lt()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lt-LT",
                            "lt",
                            "LT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lt_LT()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lu",
                            "lu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lu-CD",
                            "lu",
                            "CD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ln_CD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "luo",
                            "luo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "luo-KE",
                            "luo",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "luy",
                            "luy",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "luy-KE",
                            "luy",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lv",
                            "lv",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lv()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "lv-LV",
                            "lv",
                            "LV",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lv_LV()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mas",
                            "mas",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mas-KE",
                            "mas",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mas-TZ",
                            "mas",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mer",
                            "mer",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mer-KE",
                            "mer",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mfe",
                            "mfe",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mfe-MU",
                            "mfe",
                            "MU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mfe_MU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mg",
                            "mg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mg-MG",
                            "mg",
                            "MG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mgh",
                            "mgh",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mgh-MZ",
                            "mgh",
                            "MZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mgh_MZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mgo",
                            "mgo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mgo-CM",
                            "mgo",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mk",
                            "mk",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mk-MK",
                            "mk",
                            "MK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mk_MK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ml",
                            "ml",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ml-IN",
                            "ml",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mn",
                            "mn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mn-MN",
                            "mn",
                            "MN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mn_MN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mr",
                            "mr",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mr()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mr-IN",
                            "mr",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mr_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ms",
                            "ms",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ms-BN",
                            "ms",
                            "BN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ms_BN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ms-MY",
                            "ms",
                            "MY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ms-SG",
                            "ms",
                            "SG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mt",
                            "mt",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mt-MT",
                            "mt",
                            "MT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mua",
                            "mua",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mua-CM",
                            "mua",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "my",
                            "my",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_my()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "my-MM",
                            "my",
                            "MM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_my_MM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mzn",
                            "mzn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ks()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "mzn-IR",
                            "mzn",
                            "IR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_lrc_IR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "naq",
                            "naq",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "naq-NA",
                            "naq",
                            "NA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_NA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nb",
                            "nb",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nb-NO",
                            "nb",
                            "NO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb_NO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nb-SJ",
                            "nb",
                            "SJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb_NO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nd",
                            "nd",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nd-ZW",
                            "nd",
                            "ZW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_ZW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ne",
                            "ne",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mr()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ne-IN",
                            "ne",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mr_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ne-NP",
                            "ne",
                            "NP",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ne_NP()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl",
                            "nl",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-AW",
                            "nl",
                            "AW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nl_AW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-BE",
                            "nl",
                            "BE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-BQ",
                            "nl",
                            "BQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_EC()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-CW",
                            "nl",
                            "CW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nl_CW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-NL",
                            "nl",
                            "NL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-SR",
                            "nl",
                            "SR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nl_SR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nl-SX",
                            "nl",
                            "SX",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nl_CW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nmg",
                            "nmg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nmg-CM",
                            "nmg",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nn",
                            "nn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nn-NO",
                            "no",
                            "NO",
                            "NY",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb_NO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nn-NO",
                            "nn",
                            "NO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb_NO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nnh",
                            "nnh",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nnh-CM",
                            "nnh",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "no",
                            "no",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "no-NO",
                            "no",
                            "NO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_nb_NO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nus",
                            "nus",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nus-SS",
                            "nus",
                            "SS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nyn",
                            "nyn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "nyn-UG",
                            "nyn",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "om",
                            "om",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "om-ET",
                            "om",
                            "ET",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_om_ET()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "om-KE",
                            "om",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "or",
                            "or",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "or-IN",
                            "or",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "os",
                            "os",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_os()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "os-GE",
                            "os",
                            "GE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_os_GE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "os-RU",
                            "os",
                            "RU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_os_RU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa",
                            "pa",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa-Arab",
                            "pa",
                            "",
                            "",
                            "Arab"),
                    walkingkookaDecimalFormatSymbols_ks()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa-Arab-PK",
                            "pa",
                            "PK",
                            "",
                            "Arab"),
                    walkingkookaDecimalFormatSymbols_pa_PK_Arab()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa-Guru",
                            "pa",
                            "",
                            "",
                            "Guru"),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa-Guru-IN",
                            "pa",
                            "IN",
                            "",
                            "Guru"),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa-IN",
                            "pa",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pa-PK",
                            "pa",
                            "PK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pa_PK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pl",
                            "pl",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pl-PL",
                            "pl",
                            "PL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pl_PL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "prg",
                            "prg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "prg-001",
                            "prg",
                            "001",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ps",
                            "ps",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ks()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ps-AF",
                            "ps",
                            "AF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ps_AF()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt",
                            "pt",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-AO",
                            "pt",
                            "AO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_AO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-BR",
                            "pt",
                            "BR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_BR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-CH",
                            "pt",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-CV",
                            "pt",
                            "CV",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_kea_CV()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-GQ",
                            "pt",
                            "GQ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-GW",
                            "pt",
                            "GW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_GW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-LU",
                            "pt",
                            "LU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_LU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-MO",
                            "pt",
                            "MO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_MO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-MZ",
                            "pt",
                            "MZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_MZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-PT",
                            "pt",
                            "PT",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_LU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-ST",
                            "pt",
                            "ST",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_ST()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "pt-TL",
                            "pt",
                            "TL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_pt_TL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "qu",
                            "qu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "qu-BO",
                            "qu",
                            "BO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_BO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "qu-EC",
                            "qu",
                            "EC",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_chr_US()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "qu-PE",
                            "qu",
                            "PE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_PE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rm",
                            "rm",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_gsw()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rm-CH",
                            "rm",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_gsw_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rn",
                            "rn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rn-BI",
                            "rn",
                            "BI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_rn_BI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ro",
                            "ro",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ro-MD",
                            "ro",
                            "MD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ro_MD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ro-RO",
                            "ro",
                            "RO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ro_RO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rof",
                            "rof",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rof-TZ",
                            "rof",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru",
                            "ru",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru-BY",
                            "ru",
                            "BY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru_BY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru-KG",
                            "ru",
                            "KG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru_KG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru-KZ",
                            "ru",
                            "KZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru_KZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru-MD",
                            "ru",
                            "MD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru_MD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru-RU",
                            "ru",
                            "RU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru_RU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ru-UA",
                            "ru",
                            "UA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ru_UA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rw",
                            "rw",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rw-RW",
                            "rw",
                            "RW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_rw_RW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rwk",
                            "rwk",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "rwk-TZ",
                            "rwk",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sah",
                            "sah",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sah-RU",
                            "sah",
                            "RU",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cu_RU()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "saq",
                            "saq",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "saq-KE",
                            "saq",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sbp",
                            "sbp",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sbp-TZ",
                            "sbp",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "se",
                            "se",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "se-FI",
                            "se",
                            "FI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh_DE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "se-NO",
                            "se",
                            "NO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_se_NO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "se-SE",
                            "se",
                            "SE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_se_SE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "seh",
                            "seh",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "seh-MZ",
                            "seh",
                            "MZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_mgh_MZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ses",
                            "ses",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ses-ML",
                            "ses",
                            "ML",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje_NE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sg",
                            "sg",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sg-CF",
                            "sg",
                            "CF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_es_GQ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "shi",
                            "shi",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "shi-Latn",
                            "shi",
                            "",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "shi-Latn-MA",
                            "shi",
                            "MA",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_shi_MA_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "shi-MA",
                            "shi",
                            "MA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_shi_MA_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "shi-Tfng",
                            "shi",
                            "",
                            "",
                            "Tfng"),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "shi-Tfng-MA",
                            "shi",
                            "MA",
                            "",
                            "Tfng"),
                    walkingkookaDecimalFormatSymbols_shi_MA_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "si",
                            "si",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "si-LK",
                            "si",
                            "LK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_si_LK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sk",
                            "sk",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sk-SK",
                            "sk",
                            "SK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_br_FR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sl",
                            "sl",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_el()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sl-SI",
                            "sl",
                            "SI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_el_CY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "smn",
                            "smn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_smn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "smn-FI",
                            "smn",
                            "FI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_smn_FI()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sn",
                            "sn",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sn-ZW",
                            "sn",
                            "ZW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_ZW()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "so",
                            "so",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "so-DJ",
                            "so",
                            "DJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_so_DJ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "so-ET",
                            "so",
                            "ET",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_om_ET()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "so-KE",
                            "so",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "so-SO",
                            "so",
                            "SO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_so_SO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sq",
                            "sq",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sq-AL",
                            "sq",
                            "AL",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_sq_AL()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sq-MK",
                            "sq",
                            "MK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_sq_MK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sq-XK",
                            "sq",
                            "XK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr",
                            "sr",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-BA",
                            "sr",
                            "BA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_sr_BA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-CS",
                            "sr",
                            "CS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_sr_CS()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Cyrl",
                            "sr",
                            "",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Cyrl-BA",
                            "sr",
                            "BA",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_sr_BA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Cyrl-ME",
                            "sr",
                            "ME",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Cyrl-RS",
                            "sr",
                            "RS",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_sr_RS_Cyrl()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Cyrl-XK",
                            "sr",
                            "XK",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Latn",
                            "sr",
                            "",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Latn-BA",
                            "sr",
                            "BA",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_bs_BA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Latn-ME",
                            "sr",
                            "ME",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Latn-RS",
                            "sr",
                            "RS",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_sr_RS_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-Latn-XK",
                            "sr",
                            "XK",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-ME",
                            "sr",
                            "ME",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sr-RS",
                            "sr",
                            "RS",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_sr_RS_Cyrl()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sv",
                            "sv",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sv-AX",
                            "sv",
                            "AX",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh_DE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sv-FI",
                            "sv",
                            "FI",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ksh_DE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sv-SE",
                            "sv",
                            "SE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_se_SE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sw",
                            "sw",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sw-CD",
                            "sw",
                            "CD",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ln_CD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sw-KE",
                            "sw",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sw-TZ",
                            "sw",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "sw-UG",
                            "sw",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ta",
                            "ta",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ta-IN",
                            "ta",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ta-LK",
                            "ta",
                            "LK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ta_LK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ta-MY",
                            "ta",
                            "MY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_MY()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ta-SG",
                            "ta",
                            "SG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "te",
                            "te",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "te-IN",
                            "te",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bo_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "teo",
                            "teo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "teo-KE",
                            "teo",
                            "KE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dav_KE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "teo-UG",
                            "teo",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "th",
                            "th",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "th-TH",
                            "th",
                            "TH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_th_TH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ti",
                            "ti",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ti-ER",
                            "ti",
                            "ER",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_ER()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ti-ET",
                            "ti",
                            "ET",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_om_ET()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tk",
                            "tk",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_tk()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tk-TM",
                            "tk",
                            "TM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_tk_TM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "to",
                            "to",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_to()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "to-TO",
                            "to",
                            "TO",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_to_TO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tr",
                            "tr",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tr-CY",
                            "tr",
                            "CY",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ca_AD()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tr-TR",
                            "tr",
                            "TR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_tr_TR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "twq",
                            "twq",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "twq-NE",
                            "twq",
                            "NE",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_dje_NE()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tzm",
                            "tzm",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "tzm-MA",
                            "tzm",
                            "MA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_shi_MA_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ug",
                            "ug",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ug-CN",
                            "ug",
                            "CN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ug_CN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uk",
                            "uk",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_uk()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uk-UA",
                            "uk",
                            "UA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_uk_UA()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "und",
                            "",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ur",
                            "ur",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_iw()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ur-IN",
                            "ur",
                            "IN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ur_IN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "ur-PK",
                            "ur",
                            "PK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ur_PK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz",
                            "uz",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_uz()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-AF",
                            "uz",
                            "AF",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_uz_AF()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-Arab",
                            "uz",
                            "",
                            "",
                            "Arab"),
                    walkingkookaDecimalFormatSymbols_ks()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-Arab-AF",
                            "uz",
                            "AF",
                            "",
                            "Arab"),
                    walkingkookaDecimalFormatSymbols_ps_AF()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-Cyrl",
                            "uz",
                            "",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_uz__Cyrl()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-Cyrl-UZ",
                            "uz",
                            "UZ",
                            "",
                            "Cyrl"),
                    walkingkookaDecimalFormatSymbols_uz_UZ_Cyrl()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-Latn",
                            "uz",
                            "",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_uz()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-Latn-UZ",
                            "uz",
                            "UZ",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_uz_UZ_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "uz-UZ",
                            "uz",
                            "UZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_uz_UZ_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vai",
                            "vai",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vai-LR",
                            "vai",
                            "LR",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_LR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vai-Latn",
                            "vai",
                            "",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vai-Latn-LR",
                            "vai",
                            "LR",
                            "",
                            "Latn"),
                    walkingkookaDecimalFormatSymbols_en_LR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vai-Vaii",
                            "vai",
                            "",
                            "",
                            "Vaii"),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vai-Vaii-LR",
                            "vai",
                            "LR",
                            "",
                            "Vaii"),
                    walkingkookaDecimalFormatSymbols_en_LR()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vi",
                            "vi",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_az()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vi-VN",
                            "vi",
                            "VN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_vi_VN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vo",
                            "vo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vo-001",
                            "vo",
                            "001",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vun",
                            "vun",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "vun-TZ",
                            "vun",
                            "TZ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_asa_TZ()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "wae",
                            "wae",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_wae()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "wae-CH",
                            "wae",
                            "CH",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_wae_CH()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "xog",
                            "xog",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "xog-UG",
                            "xog",
                            "UG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_cgg_UG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yav",
                            "yav",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yav-CM",
                            "yav",
                            "CM",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_agq_CM()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yi",
                            "ji",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yi-001",
                            "ji",
                            "001",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yo",
                            "yo",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yo-BJ",
                            "yo",
                            "BJ",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_bm_ML()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yo-NG",
                            "yo",
                            "NG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_NG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yue",
                            "yue",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_yue()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "yue-HK",
                            "yue",
                            "HK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_yue_HK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zgh",
                            "zgh",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_af()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zgh-MA",
                            "zgh",
                            "MA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_shi_MA_Latn()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh",
                            "zh",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-CN",
                            "zh",
                            "CN",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ug_CN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-HK",
                            "zh",
                            "HK",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_yue_HK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hans",
                            "zh",
                            "",
                            "",
                            "Hans"),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hans-CN",
                            "zh",
                            "CN",
                            "",
                            "Hans"),
                    walkingkookaDecimalFormatSymbols_ug_CN()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hans-HK",
                            "zh",
                            "HK",
                            "",
                            "Hans"),
                    walkingkookaDecimalFormatSymbols_en_HK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hans-MO",
                            "zh",
                            "MO",
                            "",
                            "Hans"),
                    walkingkookaDecimalFormatSymbols_en_MO()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hans-SG",
                            "zh",
                            "SG",
                            "",
                            "Hans"),
                    walkingkookaDecimalFormatSymbols_en_SG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hant",
                            "zh",
                            "",
                            "",
                            "Hant"),
                    walkingkookaDecimalFormatSymbols_yue()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hant-HK",
                            "zh",
                            "HK",
                            "",
                            "Hant"),
                    walkingkookaDecimalFormatSymbols_yue_HK()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hant-MO",
                            "zh",
                            "MO",
                            "",
                            "Hant"),
                    walkingkookaDecimalFormatSymbols_zh_MO_Hant()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-Hant-TW",
                            "zh",
                            "TW",
                            "",
                            "Hant"),
                    walkingkookaDecimalFormatSymbols_zh_TW_Hant()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-SG",
                            "zh",
                            "SG",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_en_SG()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zh-TW",
                            "zh",
                            "TW",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_zh_TW_Hant()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zu",
                            "zu",
                            "",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_ak()
            ),
            WalkingkookaLocale.with(
                    WalkingkookaLanguageTag.with(
                            "zu-ZA",
                            "zu",
                            "ZA",
                            "",
                            ""),
                    walkingkookaDecimalFormatSymbols_zu_ZA()
            ));
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_AE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AED",
                "د.إ.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "AED",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uz_AF() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AFN",
                "AFN",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "AFN",
                '-',
                ',',
                "haqiqiy son emas",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ps_AF() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AFN",
                "؋",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "AFN",
                '‎',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fa_AF() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AFN",
                "؋",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "AFN",
                '‎',
                '٫',
                "ناعدد",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_sq_AL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ALL",
                "Lekë",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "ALL",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_hy_AM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AMD",
                "֏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "AMD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_nl_CW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ANG",
                "NAf.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "ANG",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SX() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ANG",
                "NAf.",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ANG",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_AO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AOA",
                "Kz",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "AOA",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ln_AO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AOA",
                "Kz",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "AOA",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_AR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ARS",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "ARS",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_CC() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AUD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "AUD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_AU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AUD",
                "$",
                '.',
                '#',
                "e",
                ',',
                "∞",
                "AUD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_nl_AW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AWG",
                "Afl.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "AWG",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_az_AZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "AZN",
                "₼",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "AZN",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bs_BA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BAM",
                "KM",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BAM",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bs_BA_Cyrl() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BAM",
                "КМ",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BAM",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_sr_BA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BAM",
                "КМ.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BAM",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_BB() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BBD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BBD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bn_BD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BDT",
                "৳",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BDT",
                '-',
                '.',
                "সংখ্যা না",
                ';',
                '%',
                '‰',
                '০');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bg_BG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BGN",
                "лв.",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "BGN",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_BH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BHD",
                "د.ب.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "BHD",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_rn_BI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BIF",
                "FBu",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BIF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_BI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BIF",
                "FBu",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "BIF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_BI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BIF",
                "FBu",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BIF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_BM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BMD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BMD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ms_BN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BND",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BND",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_BO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BOB",
                "Bs",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BOB",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_BR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BRL",
                "R$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "BRL",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_BR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BRL",
                "R$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BRL",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_BS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BSD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BSD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_dz_BT() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BTN",
                "Nu.",
                '.',
                '#',
                "E",
                ',',
                "གྲངས་མེད",
                "BTN",
                '-',
                '.',
                "ཨང་མད",
                'ད',
                '%',
                '‰',
                '༠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_BW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BWP",
                "P",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BWP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru_BY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BYN",
                "BYN",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "BYN",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_be_BY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BYN",
                "Руб",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "BYN",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_BZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "BZD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "BZD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_CA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CAD",
                "$",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "CAD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_CA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CAD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "CAD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ln_CD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CDF",
                "FC",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "CDF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_CD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CDF",
                "FC",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "CDF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "CHF",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "CHF",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "CHF",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "CHF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_wae_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "CHF",
                ',',
                '#',
                "E",
                '’',
                "∞",
                "CHF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_de_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "CHF",
                '.',
                '#',
                "E",
                '\'',
                "∞",
                "CHF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_gsw_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "CHF",
                '.',
                '#',
                "E",
                '’',
                "∞",
                "CHF",
                '−',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_it_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "SFr.",
                '.',
                '#',
                "E",
                '\'',
                "∞",
                "CHF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_CH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CHF",
                "SFr.",
                '.',
                '#',
                "E",
                ' ',
                "∞",
                "CHF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_CL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CLP",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "CLP",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bo_CN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CNY",
                "¥",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "CNY",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ug_CN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CNY",
                "￥",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "CNY",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_CO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "COP",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "COP",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_CR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CRC",
                "₡",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "CRC",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_sr_CS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CSD",
                "CSD",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "CSD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_CU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CUP",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "CUP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_kea_CV() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CVE",
                "​",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "CVE",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_cs_CZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "CZK",
                "Kč",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "CZK",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_DJ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DJF",
                "Fdj",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "DJF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_so_DJ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DJF",
                "Fdj",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "DJF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_DJ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DJF",
                "Fdj",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "DJF",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fo_FO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DKK",
                "kr",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "DKK",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_da_DK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DKK",
                "kr.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "DKK",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fo_DK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DKK",
                "kr.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "DKK",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_DO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DOP",
                "RD$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "DOP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_DZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DZD",
                "DA",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "DZD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_DZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "DZD",
                "د.ج.‏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "DZD",
                '‎',
                ',',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_EG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EGP",
                "ج.م.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "EGP",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_ER() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ERN",
                "Nfk",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ERN",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_ER() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ERN",
                "Nfk",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "ERN",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_om_ET() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ETB",
                "Br",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ETB",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_am_ET() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ETB",
                "ብር",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ETB",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_LU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "EUR",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ast_ES() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "EUR",
                '-',
                ',',
                "ND",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ca_AD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "EUR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_br_FR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "EUR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lv_LV() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "EUR",
                '-',
                ',',
                "nav skaitlis",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fi_FI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "EUR",
                '−',
                ',',
                "epäluku",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_el_CY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "e",
                '.',
                "∞",
                "EUR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lt_LT() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "EUR",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ksh_DE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "EUR",
                '−',
                ',',
                "¤¤¤",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_CY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "EUR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_smn_FI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "EUR",
                '-',
                '.',
                "epiloho",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_gsw_FR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                '.',
                '#',
                "E",
                '’',
                "∞",
                "EUR",
                '−',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_et_EE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "EUR",
                "€",
                '.',
                '#',
                "×10^",
                ' ',
                "∞",
                "EUR",
                '−',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_FJ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "FJD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "FJD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_FK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "FKP",
                "£",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "FKP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_cy_GB() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GBP",
                "£",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GBP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_os_GE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GEL",
                "₾",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "GEL",
                '-',
                ',',
                "НН",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ka_GE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GEL",
                "₾",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "GEL",
                '-',
                ',',
                "არ არის რიცხვი",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ak_GH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GHS",
                "GH₵",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GHS",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ee_GH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GHS",
                "GH₵",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GHS",
                '-',
                '.',
                "mnn",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_GI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GIP",
                "£",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GIP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_GM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GMD",
                "D",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GMD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ff_GN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GNF",
                "FG",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "GNF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_GT() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GTQ",
                "Q",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GTQ",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_GY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "GYD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "GYD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_HK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "HKD",
                "HK$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "HKD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_yue_HK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "HKD",
                "HK$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "HKD",
                '-',
                '.',
                "非數值",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_HN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "HNL",
                "L",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "HNL",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_hr_HR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "HRK",
                "HRK",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "HRK",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_HT() {
        return WalkingkookaDecimalFormatSymbols.with(
                "HTG",
                "G",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "HTG",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_hu_HU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "HUF",
                "Ft",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "HUF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_in_ID() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IDR",
                "Rp",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "IDR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_IL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ILS",
                "₪",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ILS",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_iw_IL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ILS",
                "₪",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ILS",
                '‎',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_IL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ILS",
                "₪",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "ILS",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "Rs.",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "INR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bo_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "₹",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "INR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_mr_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "₹",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "INR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '०');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_as_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "₹",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "INR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '০');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bn_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "₹",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "INR",
                '-',
                '.',
                "সংখ্যা না",
                ';',
                '%',
                '‰',
                '০');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ur_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "₹",
                '.',
                '#',
                "×۱۰^",
                ',',
                "∞",
                "INR",
                '‎',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ks_IN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "INR",
                "₹",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "INR",
                '‎',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lrc_IQ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IQD",
                "IQD",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "IQD",
                '‎',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ckb_IQ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IQD",
                "IQD",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "IQD",
                '‏',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_IQ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IQD",
                "د.ع.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "IQD",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lrc_IR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IRR",
                "IRR",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "IRR",
                '‎',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ckb_IR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IRR",
                "IRR",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "IRR",
                '‏',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fa_IR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "IRR",
                "ریال",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "IRR",
                '‎',
                '٫',
                "ناعدد",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_is_IS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ISK",
                "ISK",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "ISK",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_JM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "JMD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "JMD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_JO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "JOD",
                "د.أ.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "JOD",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ja_JP() {
        return WalkingkookaDecimalFormatSymbols.with(
                "JPY",
                "￥",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "JPY",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_dav_KE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KES",
                "Ksh",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "KES",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru_KG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KGS",
                "сом",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "KGS",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ky_KG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KGS",
                "сом",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "KGS",
                '-',
                ',',
                "сан эмес",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_km_KH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KHR",
                "៛",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "KHR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_KM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KMF",
                "CF",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "KMF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_KM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KMF",
                "ف.ج.ق.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "KMF",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ko_KP() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KPW",
                "KPW",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "KPW",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ko_KR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KRW",
                "₩",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "KRW",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_KW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KWD",
                "د.ك.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "KWD",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_KY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KYD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "KYD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_kk_KZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KZT",
                "₸",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "KZT",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru_KZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "KZT",
                "₸",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "KZT",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lo_LA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LAK",
                "₭",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "LAK",
                '-',
                ',',
                "ບໍ່​ແມ່ນ​ໂຕ​ເລກ",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_LB() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LBP",
                "ل.ل.‏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "LBP",
                '‎',
                ',',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ta_LK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LKR",
                "Rs.",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "LKR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_si_LK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LKR",
                "රු.",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "LKR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_LR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LRD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "LRD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_LS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LSL",
                "LSL",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "LSL",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_LY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "LYD",
                "د.ل.‏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "LYD",
                '‎',
                ',',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_MA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MAD",
                "MAD",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "MAD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_shi_MA_Latn() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MAD",
                "MAD",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "MAD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_MA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MAD",
                "د.م.‏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "MAD",
                '‎',
                ',',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_EH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MAD",
                "د.م.‏",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MAD",
                '‎',
                '.',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ro_MD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MDL",
                "L",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "MDL",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru_MD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MDL",
                "L",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "MDL",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_MG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MGA",
                "Ar",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "MGA",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_MG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MGA",
                "Ar",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MGA",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_sq_MK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MKD",
                "den",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "MKD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_mk_MK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MKD",
                "ден",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "MKD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_my_MM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MMK",
                "K",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MMK",
                '-',
                '.',
                "NaN",
                '၊',
                '%',
                '‰',
                '၀');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_mn_MN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MNT",
                "₮",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MNT",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_MO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MOP",
                "MOP$",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "MOP",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_MO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MOP",
                "MOP$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MOP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_zh_MO_Hant() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MOP",
                "MOP$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MOP",
                '-',
                '.',
                "非數值",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ff_MR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MRO",
                "UM",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "MRO",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_MR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MRO",
                "أ.م.‏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "MRO",
                '‎',
                ',',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_MU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MUR",
                "Rs",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "MUR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_MU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MUR",
                "Rs",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MUR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_mfe_MU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MUR",
                "Rs",
                '.',
                '#',
                "E",
                ' ',
                "∞",
                "MUR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_MW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MWK",
                "MK",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MWK",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_MX() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MXN",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MXN",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_MY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MYR",
                "RM",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "MYR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_MZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MZN",
                "MTn",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "MZN",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_mgh_MZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "MZN",
                "MTn",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "MZN",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_af_NA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NAD",
                "$",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "NAD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_NA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NAD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "NAD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_NG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NGN",
                "₦",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "NGN",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_NI() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NIO",
                "C$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "NIO",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_nb_NO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NOK",
                "kr",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "NOK",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_se_NO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NOK",
                "kr",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "NOK",
                '−',
                ',',
                "¤¤¤",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ne_NP() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NPR",
                "नेरू",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "NPR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '०');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_CK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "NZD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "NZD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_OM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "OMR",
                "ر.ع.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "OMR",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_PA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PAB",
                "B/.",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PAB",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_PE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PEN",
                "S/.",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PEN",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_PG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PGK",
                "K",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PGK",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_PH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PHP",
                "₱",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "PHP",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_PH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PHP",
                "₱",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PHP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pa_PK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PKR",
                "PKR",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PKR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_PK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PKR",
                "Rs",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PKR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ur_PK() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PKR",
                "Rs",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "PKR",
                '‎',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pa_PK_Arab() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PKR",
                "ر",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "PKR",
                '‎',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pl_PL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PLN",
                "zł",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "PLN",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_PY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "PYG",
                "Gs.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "PYG",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_QA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "QAR",
                "ر.ق.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "QAR",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ro_RO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RON",
                "RON",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "RON",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_sr_RS_Cyrl() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RSD",
                "RSD",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "RSD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_sr_RS_Latn() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RSD",
                "din.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "RSD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_os_RU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RUB",
                "₽",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "RUB",
                '-',
                ',',
                "НН",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru_RU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RUB",
                "₽",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "RUB",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_cu_RU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RUB",
                "₽",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "RUB",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ce_RU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RUB",
                "₽",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "RUB",
                '-',
                '.',
                "Терхьаш дац",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_rw_RW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RWF",
                "RF",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "RWF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_RW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RWF",
                "RF",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "RWF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_RW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "RWF",
                "RF",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "RWF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_SA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SAR",
                "ر.س.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "SAR",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SB() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SBD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SBD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_SC() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SCR",
                "SR",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "SCR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SC() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SCR",
                "SR",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SCR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SDG",
                "SDG",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SDG",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_SD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SDG",
                "ج.س.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "SDG",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SEK",
                "kr",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "SEK",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_se_SE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SEK",
                "kr",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "SEK",
                '−',
                ',',
                "¤¤¤",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SGD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SGD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SHP",
                "£",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SHP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SLL",
                "Le",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SLL",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_so_SO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SOS",
                "S",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SOS",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_SO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SOS",
                "S",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "SOS",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_nl_SR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SRD",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "SRD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SSP",
                "£",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SSP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_SS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SSP",
                "£",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "SSP",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_ST() {
        return WalkingkookaDecimalFormatSymbols.with(
                "STD",
                "Db",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "STD",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_SV() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SVC",
                "C",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SVC",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_SY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SYP",
                "LS",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "SYP",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_SY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SYP",
                "ل.س.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "SYP",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_SZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "SZL",
                "E",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "SZL",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_th_TH() {
        return WalkingkookaDecimalFormatSymbols.with(
                "THB",
                "THB",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "THB",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_tk_TM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TMT",
                "TMT",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "TMT",
                '-',
                ',',
                "san däl",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_TN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TND",
                "DT",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "TND",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_TN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TND",
                "د.ت.‏",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "TND",
                '‎',
                ',',
                "ليس رقمًا",
                ';',
                '٪',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_TO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TOP",
                "T$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "TOP",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_to_TO() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TOP",
                "T$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "TOP",
                '-',
                '.',
                "TF",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_tr_TR() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TRY",
                "₺",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "TRY",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_TT() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TTD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "TTD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_zh_TW_Hant() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TWD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "TWD",
                '-',
                '.',
                "非數值",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_asa_TZ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "TZS",
                "TSh",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "TZS",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru_UA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "UAH",
                "₴",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "UAH",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uk_UA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "UAH",
                "₴",
                ',',
                '#',
                "Е",
                ' ',
                "∞",
                "UAH",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_cgg_UG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "UGX",
                "USh",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "UGX",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_EC() {
        return WalkingkookaDecimalFormatSymbols.with(
                "USD",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "USD",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_US_POSIX() {
        return WalkingkookaDecimalFormatSymbols.with(
                "USD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "INF",
                "USD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '0',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_chr_US() {
        return WalkingkookaDecimalFormatSymbols.with(
                "USD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "USD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_TL() {
        return WalkingkookaDecimalFormatSymbols.with(
                "USD",
                "US$",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "USD",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_FM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "USD",
                "US$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "USD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_UY() {
        return WalkingkookaDecimalFormatSymbols.with(
                "UYU",
                "$",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "UYU",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uz_UZ_Latn() {
        return WalkingkookaDecimalFormatSymbols.with(
                "UZS",
                "soʻm",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "UZS",
                '-',
                ',',
                "haqiqiy son emas",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uz_UZ_Cyrl() {
        return WalkingkookaDecimalFormatSymbols.with(
                "UZS",
                "сўм",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "UZS",
                '-',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_VE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "VEF",
                "Bs.",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "VEF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_vi_VN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "VND",
                "₫",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "VND",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_VU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "VUV",
                "VT",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "VUV",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_VU() {
        return WalkingkookaDecimalFormatSymbols.with(
                "VUV",
                "VT",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "VUV",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_WS() {
        return WalkingkookaDecimalFormatSymbols.with(
                "WST",
                "WS$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "WST",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_GQ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XAF",
                "FCFA",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "XAF",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_es_GQ() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XAF",
                "FCFA",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "XAF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_agq_CM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XAF",
                "FCFA",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XAF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_CM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XAF",
                "FCFA",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XAF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_TD() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XAF",
                "FCFA",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "XAF",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_AG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XCD",
                "$",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XCD",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_pt_GW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XOF",
                "CFA",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "XOF",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_dyo_SN() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XOF",
                "CFA",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XOF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bm_ML() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XOF",
                "CFA",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XOF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ee_TG() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XOF",
                "CFA",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XOF",
                '-',
                '.',
                "mnn",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_dje_NE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XOF",
                "CFA",
                '.',
                '#',
                "E",
                ' ',
                "∞",
                "XOF",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fr_NC() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XPF",
                "FCFP",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XPF",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_kea() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '$',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '$',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ast() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "XXX",
                '-',
                ',',
                "ND",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_az() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "XXX",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lo() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "XXX",
                '-',
                ',',
                "ບໍ່​ແມ່ນ​ໂຕ​ເລກ",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fo() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                '.',
                "∞",
                "XXX",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_af() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uz() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "haqiqiy son emas",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lv() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "nav skaitlis",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_tk() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "san däl",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_os() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "НН",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ru() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "не число",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ky() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "сан эмес",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ka() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "არ არის რიცხვი",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_nb() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fi() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '−',
                ',',
                "epäluku",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_wae() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "E",
                '’',
                "∞",
                "XXX",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_el() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "e",
                '.',
                "∞",
                "XXX",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_lt() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "XXX",
                '−',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ksh() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "×10^",
                ' ',
                "∞",
                "XXX",
                '−',
                ',',
                "¤¤¤",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uk() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                ',',
                '#',
                "Е",
                ' ',
                "∞",
                "XXX",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_dz() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "གྲངས་མེད",
                "XXX",
                '-',
                '.',
                "ཨང་མད",
                'ད',
                '%',
                '‰',
                '༠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ak() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_mr() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '०');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_as() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '০');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_my() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "NaN",
                '၊',
                '%',
                '‰',
                '၀');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_to() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "TF",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_smn() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "epiloho",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ee() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "mnn",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ce() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "Терхьаш дац",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bn() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "সংখ্যা না",
                ';',
                '%',
                '‰',
                '০');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_yue() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '-',
                '.',
                "非數值",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_iw() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "XXX",
                '‎',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_dje() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                ' ',
                "∞",
                "XXX",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_gsw() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "E",
                '’',
                "∞",
                "XXX",
                '−',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_et() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '.',
                '#',
                "×10^",
                ' ',
                "∞",
                "XXX",
                '−',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_uz__Cyrl() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "XXX",
                '-',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ks() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "XXX",
                '‎',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_fa() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '٫',
                '#',
                "×۱۰^",
                '٬',
                "∞",
                "XXX",
                '‎',
                '٫',
                "ناعدد",
                '؛',
                '٪',
                '؉',
                '۰');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ckb() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "XXX",
                '‏',
                '٫',
                "NaN",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar() {
        return WalkingkookaDecimalFormatSymbols.with(
                "XXX",
                "¤",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "XXX",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_ar_YE() {
        return WalkingkookaDecimalFormatSymbols.with(
                "YER",
                "ر.ي.‏",
                '٫',
                '#',
                "اس",
                '٬',
                "∞",
                "YER",
                '‏',
                '٫',
                "ليس رقم",
                '؛',
                '٪',
                '؉',
                '٠');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_af_ZA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ZAR",
                "R",
                ',',
                '#',
                "E",
                ' ',
                "∞",
                "ZAR",
                '-',
                ',',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_zu_ZA() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ZAR",
                "R",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ZAR",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_bem_ZM() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ZMW",
                "K",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ZMW",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }
    private static WalkingkookaDecimalFormatSymbols walkingkookaDecimalFormatSymbols_en_ZW() {
        return WalkingkookaDecimalFormatSymbols.with(
                "ZWL",
                "ZWL",
                '.',
                '#',
                "E",
                ',',
                "∞",
                "ZWL",
                '-',
                '.',
                "NaN",
                ';',
                '%',
                '‰',
                '0');
    }

    /**
     * Factory that parses and creates a {@link WalkingkookaLocale} from a language tag.
     */
    static WalkingkookaLocale with(final WalkingkookaLanguageTag tag,
                                   final WalkingkookaDecimalFormatSymbols decimalFormatSymbols) {
        return new WalkingkookaLocale(tag,
                decimalFormatSymbols);
    }

    private WalkingkookaLocale(final WalkingkookaLanguageTag tag,
                               final WalkingkookaDecimalFormatSymbols decimalFormatSymbols) {
        super();

        this.languageTag = tag;
        this.decimalFormatSymbols = decimalFormatSymbols;
    }

    // Locale...........................................................................................................

    private boolean test(final WalkingkookaLanguageTag other) {
        return this.languageTag().equals(other);
    }

    public WalkingkookaLanguageTag languageTag() {
        return this.languageTag;
    }

    private WalkingkookaLanguageTag languageTag;

    public WalkingkookaDecimalFormatSymbols decimalFormatSymbols() {
        return this.decimalFormatSymbols;
    }

    private final WalkingkookaDecimalFormatSymbols decimalFormatSymbols;

    // Object...........................................................................................................

    @Override
    public String toString() {
        return ToStringBuilder.empty()
                .value(this.languageTag)
                .value(this.decimalFormatSymbols())
                .build();
    }
}
